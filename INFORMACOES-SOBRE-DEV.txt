***DATABASE***
Utilizando database MYSQL. Para criar a estrutura inicial, utilizei o proprio CREATE do JPA (spring.jpa.hibernate.ddl-auto)
MELHORIA
Implementar o database utilizando LiquiBase (https://www.liquibase.org/) para controle de versão da base de dados 

***DOCKER***
Utilizando um container DOCKER para subir o banco MYSQL	
MELHORIA
Criar um DOCKERFILE nos servicos para subi-los automaticamente num container

***SEGURANÇA***
MELHORIA
Criar serviço de segurança (JWT Token) e validar o token nas APIs.

***SWAGGER***
Implementado SWAGGER nas APIs para que o client tenha informações de como utilizá-las

http://127.0.0.1:8080/swagger-ui.html#/order-m-controller
http://127.0.0.1:8081/swagger-ui.html#/payment-m-controller
http://127.0.0.1:8082/swagger-ui.html#/store-m-controller

Em anexo, o arquivo do POSTMAN utilizado para testes.(backend-challenge.postman_collection)

***LOGGING***
MELHORIA
Implementar log na aplicação

***TESTES***
MELHORIA
Criar testes unitários para a aplicação

***Asynchronous processing***
MELHORIA
Processar o pagamento de maneira assincrona. Avaliar utilização de Transcation

* AWS
* Clean Code



